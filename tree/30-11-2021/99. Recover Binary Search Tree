/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void recoverTree(TreeNode root) {
        if(root == null)
            return;
        
        TreeNode n1 = null, prev = null;
        TreeNode n2 = null;
        TreeNode curr = root;
        while(curr != null){
            if(curr.left == null){
                if(prev == null){
                    prev = curr;
                }
                else{
                    if(prev.val > curr.val){
                        if(n1 == null){
                            n1 = prev;
                            n2 = curr;
                        }
                        else
                            n2 = curr;
                    }
                 prev = curr;
                }
                curr = curr.right;
            }
            else{
                TreeNode rm = curr.left;
                while(rm.right != null && rm.right != curr)
                    rm = rm.right;
                if(rm.right == null){
                        rm.right = curr;
                        curr = curr.left;
                    }
                else{
                    if(prev == null){
                        prev = curr;
                    }
                    else{
                        if(prev.val > curr.val){
                            if(n1 == null){
                                n1 = prev;
                                n2 = curr;
                            }
                            else
                                n2 = curr;        
                        }
                        prev = curr;
                    }
                    rm.right = null;
                    curr = curr.right;
                }
            }
        }
        int temp = n1.val;
        n1.val = n2.val;
        n2.val = temp;
    }
}


// ==============================================

class Solution {
    public void helper(TreeNode root, List<TreeNode> list){
        if(root == null)
            return;
        helper(root.left, list);
        list.add(root);
        helper(root.right, list);
            
    }
    public void recoverTree(TreeNode root) {
        if(root == null)
            return;
        List<TreeNode> list = new ArrayList();
        helper(root,list);
        TreeNode n1 = null;
        TreeNode n2 = null;
        for(int i=0; i<list.size()-1; i++){
            if(list.get(i).val >= list.get(i+1).val){
               if(n1 == null){
                   n1 = list.get(i);
                   n2 = list.get(i+1);
               }
                else
                    n2 = list.get(i+1);
            }
        }
        // System.out.println(n1.val+" "+n2.val);
        int temp = n1.val;
        n1.val = n2.val;
        n2.val = temp;
    }
}
